@title Patroon.js

@s Introduction

Patroon.js as an attempt to add pattern matching-ish functionality without
introducing new syntax.

This project uses [literate programming][1] to generate all source code.

[1]:https://github.com/zyedidia/Literate

@s Specifications

--- ./src/index.test.js
const {test} = require('tape')
const { check, gen } = require('tape-check')
const {
  p, // predicate
  _, // placeholder,
  t: typed,
  patroon,
  NoMatchError
} = require('./index')

const simpleObject = {a: 1}
const otherObject = {b: 1}
const emptyObject = {}

class A { }
class B { }

test('Matches on type', t => {
  patroon(
    typed(B), () => t.fail(),
    typed(A, {a: _}), () => t.fail(),
    typed(A), () => t.end()
  )(new A())
})

test('Matches on type and values assigned to that type', t => {
  patroon(
    typed(B, {value: 20}), () => t.fail(),
    typed(A, {value: 30}), () => t.fail(),
    typed(A, {value: 20}), () => t.end()
  )(Object.assign(new A(), {value: 20}))
})

test('Matches only when property exists', t => {
  patroon(
    {c: _}, () => t.fail(), // c is not defined
    {a: _}, () => t.end(),
  )({a: undefined})
})

test('Matches using an array pattern', t => {
  patroon(
    [_, 10], () => t.fail(),
    [_, 20], () => t.end()
  )([10, 20])
})

test('Matches always when pattern equals value', check(gen.any, (t, val) => {
  patroon(val, () => t.end())(val)
}));

test('Matches the first pattern', t => {
  patroon(simpleObject, a => t.end())(simpleObject)
})

test('Matches the second case', t => {
  patroon(
    simpleObject, () => t.fail(),
    otherObject, () => t.end()
  )(otherObject)
})

test('Matches the default case', t => {
  patroon(
    simpleObject, () => t.fail(),
    _, a => t.equals(a, otherObject) // default case
  )(otherObject)
  t.end()
})

test('Matches a nested pattern', t => {
  patroon(
    {ok: {value: 20}}, () => t.fail(),
    {error: {value: _}}, ({error}) => t.end(),
    {error: _}, ({error}) => t.fail()
  )({error: {value: 20}})
})

test('Matches none of the patterns and throws', t => {
  try {
    patroon(
      simpleObject, () => t.fail(),
      otherObject,  () => t.fail()
    )(emptyObject)
    t.fail()
  } catch(e) {
    t.ok(e instanceof NoMatchError)
    t.end()
  }
})

test('Matches using a predicate', t => {
  const gt2 = v => v > 2

  t.equals(patroon(
    p(gt2), () => 2
  )(4), 2)
  t.end()
})
---

@s Implementation

--- ./src/index.js
const placeholderSymbol = Symbol('placeholder')
const predicateSymbol = Symbol('predicate')
const typedSymbol = Symbol('typed')
class NoMatchError extends Error {}

@{Helpers}

module.exports = Object.assign(patroon, {
  patroon,
  t: typed,
  _: placeholderSymbol,
  p: predicate,
  NoMatchError,
})

function patroon(...list) {
  const pairs = toPairs(list)
  return function (value) {
    const [_, fn] = pairs.find(([pattern, fn]) => matches(pattern, value)) ||
      [null, v => {
        // console.error('\n', v, '\n')
        throw new NoMatchError()
      }]
    return fn(value)
  }
}

function typed(constructor, matchObject) {
  function typed(v) {
    return v instanceof constructor && matches(matchObject || {}, v)
  }

  typed[typedSymbol] = true

  return typed
}

function matches(a, b) {
  if (a && a[typedSymbol]) {
    return a(b)
  }

  if (a && a[predicateSymbol]) {
    return a(b)
  }

  if (Array.isArray(a)) {
    return Object.keys(a).every(key => matches(a[key], b[key]))
  }

  if (typeof a === 'object' && a !== null) {
    const aKeys = Object.keys(a)

    return matches(aKeys, Object.keys(b)) &&
      aKeys.every(key => matches(a[key], b[key]))
  }

  return a === placeholderSymbol || a === b || Object.is(a, b)
}

function predicate(fn) {
  function predicate (value) {
    return fn(value)
  }

  predicate[predicateSymbol] = true

  return predicate
}
---

--- Helpers
// TODO: write some tests for arrays with odd list length and empty list.
function toPairs([a, b, ...rest], result = []) {
  return (rest.length !== 0)
    ? toPairs(rest, [...result, [a, b]])
    : [...result, [a, b]]
}
---
